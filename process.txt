1 Central Controller:
	- Manages game logic
	- Registers users
	- Manages chat log

Possible Players:
	- Narrator
	- Cop
	- Doctor
	- Mafia
	- Townsman

Game Flow:
	- Controller starts and listens for connections
	- When a a connection is established, all the information about that connection is stored.
	- Register 5 players minimum
	- Five players are registered, and no one else connects within 5 seconds, continue to set up the game
	- Each player is randomly assigned a role.
		- Only one Narrator, Cop, Doctor, and Mafia. Rest are townspeople
	- Result of assignment is communicated to each player

	- Now go into game flow loop
		- Show list of players currently alive
		- Ask the mafia who from the list they want to kill
		- Ask the cop who from the list they want to investigate (the cop will get a yes/no answer as to whether the person is mafia or not)
		- Ask the Doctor who from the list they want to save
			- Doctor's power trumps the Mafia's power
		- Then show a special prompt shows up to the Narrator to enter a story for the killed person. If a person was saved, then this should also be shown to the Narrator.
		- Somebody dies
		
		- Show "Open for chat" message
		- Show client a prompt and accept all messages from all clients
		- Write all received comments to a log and broadcast to all other clients along with who said that comment
		- Once someone has been decided to be killed off, then appointed spokesperson (by the central server) will type "KILL".
		- A special prompt will show up asking for the name of the person that is to be killed.
		- The selected person dies
		- Then we loop. This continues until only the mafia is left, or the mafia is killed

	
	- At the end of the game, all the assignments are revealed.

Notes:
	- Dead players can still see the chat log, but cannot participate	




Server Responsibilities:
	- Register Users
		- Several lists for each role. Also have a "Dead" list
		- Recording connection info
		- On connection, ask for username
		- Player Struct
			- Name (must be unique). Maintain a list of taken names
			- Connection (struct sockaddr_in)
			- Saved by Doctor flag
	- Once five players have joined, wait for 2 minutes for additional players.
	- Assign roles to each player
		- Send each player a string telling their role.
	- Create a linked list of current players
	- Send each player a list of the active players 
		- Use a broadcast
	- Start communication with narrator. Everybody else gets "Waiting to begin" message.
		- Get story to start the game from Narrator
	- Broadcast story to everyone
	- Start communication with doctor. Everybody else gets "You are asleep" message.
		- Get name of saved person from doctor
			- Error checks to make sure the name is valid
	- Start communication with cop. Everybody else gets "You are asleep" message.
		- Get name of suspect from cop
			- Error checks to make sure the name is valid
		- Compare name of person to the name of the mafia person. Return boolean based on comparison
	- Start communication with the mafia. Everybody else gets "You are asleep" message.
		- Get name of target from the mafia
			- Error checks to make sure the name is valid
	- Logic to determine who dies
		- Doctor's power trumps mafia's power
	- Start communication with narrator.
		- Send name of the dead person
		- Ask for a story back
	- Broadcast story to everyone
	- Open up chat to everyone
		- Use concurrency model from the previous project to accept and process requests
		- Use Beej's guide
	- 


typedef struct _lists {
	list Townsmen;
	list Cops;
	list Doctors;
	list Mafia;
	list Dead;
} FunGame;



Notes:
	- Figure out how to check for terminated TCP connections













































